'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _memoizeOne = require('memoize-one');

var _memoizeOne2 = _interopRequireDefault(_memoizeOne);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Context = require('./Context');

var _Context2 = _interopRequireDefault(_Context);

var _Utterance = require('./Utterance');

var _Utterance2 = _interopRequireDefault(_Utterance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SpeechContext = function () {
  function SpeechContext(ponyfill) {
    (0, _classCallCheck3.default)(this, SpeechContext);

    this.queueWithCurrent = [];

    this.cancel = this.cancel.bind(this);
    this.cancelAll = this.cancelAll.bind(this);
    this.speak = this.speak.bind(this);

    this.setPonyfill(ponyfill);
  }

  (0, _createClass3.default)(SpeechContext, [{
    key: 'setPonyfill',
    value: function setPonyfill(_ref) {
      var speechSynthesis = _ref.speechSynthesis,
          SpeechSynthesisUtterance = _ref.SpeechSynthesisUtterance;

      this.ponyfill = { speechSynthesis: speechSynthesis, SpeechSynthesisUtterance: SpeechSynthesisUtterance };
    }
  }, {
    key: 'cancel',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(id) {
        var index;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                index = this.queueWithCurrent.findIndex(function (utterance) {
                  return utterance.id === id;
                });

                if (!~index) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt('return', this.queueWithCurrent[index].cancel());

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function cancel(_x) {
        return _ref2.apply(this, arguments);
      }

      return cancel;
    }()
  }, {
    key: 'cancelAll',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function cancelAll() {
        return _ref3.apply(this, arguments);
      }

      return cancelAll;
    }()
  }, {
    key: 'speak',
    value: function speak(utteranceLike) {
      // console.debug(`QUEUED: ${ utteranceLike.text }`);

      if (utteranceLike.id && this.queueWithCurrent.find(function (_ref4) {
        var id = _ref4.id;
        return id === utteranceLike.id;
      })) {
        // Do not queue duplicated speak with same unique ID
        // console.debug('NOT QUEUEING DUPE');

        return;
      }

      var utterance = new _Utterance2.default(utteranceLike);

      this.queueWithCurrent = [].concat((0, _toConsumableArray3.default)(this.queueWithCurrent), [utterance]);

      if (this.queueWithCurrent.length === 1) {
        this._next();
      }

      return utterance.deferred.promise;
    }
  }, {
    key: '_next',
    value: function _next() {
      var _this = this;

      var utterance = this.queueWithCurrent[0];

      if (!utterance) {
        return;
      }

      var id = utterance.id;

      var promise = utterance.speak(this.ponyfill);

      promise.then(function () {
        _this.queueWithCurrent = _this.queueWithCurrent.filter(function (utterance) {
          return utterance.id !== id;
        });
        _this._next();
      }, function () {
        // TODO: If the error is due to Safari restriction on user touch
        //       The next loop on the next audio will also fail because it was not queued with a user touch
        _this.queueWithCurrent = _this.queueWithCurrent.filter(function (utterance) {
          return utterance.id !== id;
        });
        _this._next();
      });
    }
  }]);
  return SpeechContext;
}();

var Composer = function (_React$Component) {
  (0, _inherits3.default)(Composer, _React$Component);

  function Composer(props) {
    (0, _classCallCheck3.default)(this, Composer);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (Composer.__proto__ || (0, _getPrototypeOf2.default)(Composer)).call(this, props));

    _this2.handleVoicesChanged = _this2.handleVoicesChanged.bind(_this2);

    var voices = [];

    if (props.speechSynthesis) {
      props.speechSynthesis.addEventListener && props.speechSynthesis.addEventListener('voiceschanged', _this2.handleVoicesChanged);
      voices = props.speechSynthesis.getVoices();
    }

    _this2.mergeContext = (0, _memoizeOne2.default)(function (_ref5, voices) {
      var cancel = _ref5.cancel,
          speak = _ref5.speak;
      return {
        cancel: cancel,
        speak: speak,
        voices: voices
      };
    });

    _this2.state = {
      context: new SpeechContext({
        speechSynthesis: props.speechSynthesis,
        SpeechSynthesisUtterance: props.speechSynthesisUtterance
      }),
      voices: voices
    };
    return _this2;
  }

  (0, _createClass3.default)(Composer, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var props = this.props;

      var changed = ['speechSynthesis', 'speechSynthesisUtterance'].some(function (name) {
        return nextProps[name] !== props[name];
      });

      if (changed) {
        if (props.speechSynthesis) {
          props.speechSynthesis.removeEventListener && props.speechSynthesis.removeEventListener('voiceschanged', this.handleVoicesChanged);
        }

        this.state.context.setPonyfill({
          speechSynthesis: nextProps.speechSynthesis,
          SpeechSynthesisUtterance: nextProps.speechSynthesisUtterance
        });

        var nextVoices = [];

        if (nextProps.speechSynthesis) {
          nextProps.speechSynthesis.addEventListener && nextProps.speechSynthesis.addEventListener('voiceschanged', this.handleVoicesChanged);
          nextVoices = nextProps.speechSynthesis.getVoices() || [];
        }

        this.setState(function () {
          return { voices: nextVoices };
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var speechSynthesis = this.props.speechSynthesis;


      speechSynthesis && speechSynthesis.removeEventListener && speechSynthesis.removeEventListener('voiceschanged', this.handleVoicesChanged);
    }
  }, {
    key: 'handleVoicesChanged',
    value: function handleVoicesChanged(_ref6) {
      var target = _ref6.target;

      this.setState(function () {
        return { voices: target.getVoices() };
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var props = this.props,
          state = this.state;
      var children = props.children;


      return _react2.default.createElement(
        _Context2.default.Consumer,
        null,
        function (context) {
          return context ? typeof children === 'function' ? children(context) : children : _react2.default.createElement(
            _Context2.default.Provider,
            { value: _this3.mergeContext(state.context, state.voices) },
            typeof children === 'function' ? _react2.default.createElement(
              _Context2.default.Consumer,
              null,
              function (context) {
                return children(context);
              }
            ) : children
          );
        }
      );
    }
  }]);
  return Composer;
}(_react2.default.Component);

exports.default = Composer;


Composer.defaultProps = {
  speechSynthesis: window.speechSynthesis || window.webkitSpeechSynthesis,
  speechSynthesisUtterance: window.SpeechSynthesisUtterance || window.webkitSpeechSynthesisUtterance
};

Composer.propTypes = {
  speechSynthesis: _propTypes2.default.any,
  speechSynthesisUtterance: _propTypes2.default.any
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,