'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _createDeferred = require('./createDeferred');

var _createDeferred2 = _interopRequireDefault(_createDeferred);

var _retry = require('./retry');

var _retry2 = _interopRequireDefault(_retry);

var _sleep = require('./sleep');

var _sleep2 = _interopRequireDefault(_sleep);

var _spinWaitUntil = require('./spinWaitUntil');

var _spinWaitUntil2 = _interopRequireDefault(_spinWaitUntil);

var _timeout = require('./timeout');

var _timeout2 = _interopRequireDefault(_timeout);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createNativeUtterance(utteranceLike, ponyfill) {
  var speechSynthesis = ponyfill.speechSynthesis,
      SpeechSynthesisUtterance = ponyfill.SpeechSynthesisUtterance;
  var lang = utteranceLike.lang,
      onBoundary = utteranceLike.onBoundary,
      _utteranceLike$pitch = utteranceLike.pitch,
      pitch = _utteranceLike$pitch === undefined ? 1 : _utteranceLike$pitch,
      _utteranceLike$rate = utteranceLike.rate,
      rate = _utteranceLike$rate === undefined ? 1 : _utteranceLike$rate,
      text = utteranceLike.text,
      voice = utteranceLike.voice,
      _utteranceLike$volume = utteranceLike.volume,
      volume = _utteranceLike$volume === undefined ? 1 : _utteranceLike$volume;

  var utterance = new SpeechSynthesisUtterance(text);
  var targetVoice = void 0;

  if (typeof voice === 'function') {
    targetVoice = voice.call(speechSynthesis, speechSynthesis.getVoices());
  } else {
    var _ref = voice || {},
        voiceURI = _ref.voiceURI;

    targetVoice = voiceURI && [].find.call([].slice.call(speechSynthesis.getVoices()), function (v) {
      return v.voiceURI === voiceURI;
    });
  }

  // Edge will mute if "lang" is set to ""
  utterance.lang = lang || '';

  if (utterance.pitch || utterance.pitch === 0) {
    utterance.pitch = pitch;
  }

  if (utterance.rate || utterance.rate === 0) {
    utterance.rate = rate;
  }

  // Cognitive Services will error when "voice" is set to "null"
  // Edge will error when "voice" is set to "undefined"
  if (targetVoice) {
    utterance.voice = targetVoice;
  }

  if (utterance.volume || utterance.volume === 0) {
    utterance.volume = volume;
  }

  if (utterance.addEventListener) {
    if (onBoundary) {
      utterance.addEventListener('boundary', onBoundary);
    }

    // Since browser quirks, start/error/end events are emulated for best compatibility
  }

  return utterance;
}

var Utterance = function () {
  function Utterance(utteranceLike) {
    (0, _classCallCheck3.default)(this, Utterance);

    this.cancelled = false;
    this.deferred = (0, _createDeferred2.default)();
    this.id = utteranceLike.id;
    this.speaking = false;
    this.utteranceLike = utteranceLike;
  }

  (0, _createClass3.default)(Utterance, [{
    key: 'cancel',
    value: function cancel() {
      this.cancelled = true;

      this.speaking && this.ponyfill.speechSynthesis.cancel();

      return this.deferred.promise;
    }
  }, {
    key: 'speak',
    value: function speak(ponyfill) {
      var _this = this;

      this._speak(ponyfill).then(function () {
        _this.utteranceLike.onEnd && _this.utteranceLike.onEnd({ type: 'end' });
        _this.deferred.resolve();
      }, function (error) {
        _this.utteranceLike.onError && _this.utteranceLike.onError({ type: 'error', error: error });
        _this.deferred.reject(error);
      });

      return this.deferred.promise;
    }
  }, {
    key: '_speak',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(ponyfill) {
        var _this2 = this;

        var speechSynthesis, utterance, startDeferred, errorDeferred, endDeferred, endEvent;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this.cancelled) {
                  _context2.next = 2;
                  break;
                }

                throw new Error('cancelled');

              case 2:

                this.ponyfill = ponyfill;

                speechSynthesis = ponyfill.speechSynthesis;
                utterance = createNativeUtterance(this.utteranceLike, ponyfill);
                startDeferred = (0, _createDeferred2.default)();
                errorDeferred = (0, _createDeferred2.default)();
                endDeferred = (0, _createDeferred2.default)();


                utterance.addEventListener('end', endDeferred.resolve);
                utterance.addEventListener('error', errorDeferred.resolve);
                utterance.addEventListener('start', startDeferred.resolve);

                // if (speechSynthesis.speaking) {
                //   console.warn(`ASSERTION: speechSynthesis.speaking should not be truthy before we call speak`);
                // }

                // Chrome quirks:
                // 1. Speak an utterance
                // 2. Cancel in the midway
                // 3. Speak another utterance
                // Expected: speaking is falsy, then turn to truthy, then receive "start" event, and audio played
                // Actual: speaking is falsy, then turn to truthy (which is wrong), but receive no "start" event, and no audio played
                // Workaround: retry 2 times with a second

                // Safari quirks:
                // - Audio doesn't play if the speech is started from a user event
                // - If no audio is played, the "start" event won't fire

                // For Chrome quirks, we need a custom queue, because we need to definitely know when to expect a "start" event.
                // If we don't have a queue, the "start" event could be happening long time later because it's still pending in the queue.

                // But with the custom queue, the first item might be started from non-user event. That means in Safari, the first item is muted.
                // And after the first fail, the custom queue will play the second item from a non-user event code path. That means, all subsequent
                // items are blocked until Safari has the very first item queued from user event.

                // console.debug(`STARTING: ${ utterance.text }`);

                this.speaking = true;

                _context2.next = 14;
                return (0, _retry2.default)((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                  return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          if (!_this2.cancelled) {
                            _context.next = 2;
                            break;
                          }

                          throw new Error('cancelled');

                        case 2:

                          speechSynthesis.speak(utterance);

                          _context.prev = 3;
                          _context.next = 6;
                          return _promise2.default.race([startDeferred.promise, (0, _timeout2.default)(1000)]);

                        case 6:
                          _context.next = 12;
                          break;

                        case 8:
                          _context.prev = 8;
                          _context.t0 = _context['catch'](3);

                          // This is required for Chrome quirks.
                          // Chrome doesn't know it can't start speech, and it just wait there forever.
                          // We need to cancel it out.
                          speechSynthesis.cancel();

                          throw _context.t0;

                        case 12:
                        case 'end':
                          return _context.stop();
                      }
                    }
                  }, _callee, _this2, [[3, 8]]);
                })), 2, 0);

              case 14:

                // console.debug(`STARTED: ${ utterance.text }`);

                utterance.onStart && utterance.onStart({ type: 'start' });

                _context2.next = 17;
                return _promise2.default.race([errorDeferred.promise, endDeferred.promise, (0, _spinWaitUntil2.default)(function () {
                  return !speechSynthesis.speaking;
                }).then(function () {
                  return (0, _sleep2.default)(500);
                }).then(function () {
                  return { type: 'end', artificial: true };
                })]);

              case 17:
                endEvent = _context2.sent;


                // if (speechSynthesis.speaking) {
                //   console.warn(`ASSERTION: speechSynthesis.speaking should not be truthy after speak is stopped`);
                // }

                // console.debug(`ENDED: ${ utterance.text }`);

                this.speaking = false;

                if (!(endEvent.type === 'error')) {
                  _context2.next = 23;
                  break;
                }

                throw endEvent.error;

              case 23:
                if (!this.cancelled) {
                  _context2.next = 25;
                  break;
                }

                throw new Error('cancelled');

              case 25:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _speak(_x) {
        return _ref2.apply(this, arguments);
      }

      return _speak;
    }()
  }]);
  return Utterance;
}();

exports.default = Utterance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,