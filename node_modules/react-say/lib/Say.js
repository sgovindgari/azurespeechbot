'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Composer = require('./Composer');

var _Composer2 = _interopRequireDefault(_Composer);

var _SayPrimitive = require('./SayPrimitive');

var _SayPrimitive2 = _interopRequireDefault(_SayPrimitive);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Say = function Say(props) {
  return _react2.default.createElement(
    _Composer2.default,
    {
      speechSynthesis: props.speechSynthesis,
      speechSynthesisUtterance: props.speechSynthesisUtterance
    },
    _react2.default.createElement(
      _SayPrimitive2.default,
      {
        lang: props.lang,
        onBoundary: props.onBoundary,
        onEnd: props.onEnd,
        onError: props.onError,
        onStart: props.onStart,
        pitch: props.pitch,
        rate: props.rate,
        speak: props.speak,
        voice: props.voice,
        volume: props.volume
      },
      props.children
    )
  );
};

Say.defaultProps = {
  speechSynthesis: window.speechSynthesis || window.webkitSpeechSynthesis,
  speechSynthesisUtterance: window.SpeechSynthesisUtterance || window.webkitSpeechSynthesisUtterance
};

Say.propTypes = {
  lang: _propTypes2.default.string,
  onBoundary: _propTypes2.default.func,
  onEnd: _propTypes2.default.func,
  onError: _propTypes2.default.func,
  onStart: _propTypes2.default.func,
  pitch: _propTypes2.default.number,
  rate: _propTypes2.default.number,
  speechSynthesis: _propTypes2.default.any,
  speechSynthesisUtterance: _propTypes2.default.any,
  speak: _propTypes2.default.string,
  voice: _propTypes2.default.oneOfType([_propTypes2.default.any, _propTypes2.default.func]),
  volume: _propTypes2.default.number
};

exports.default = Say;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TYXkuanMiXSwibmFtZXMiOlsiU2F5IiwicHJvcHMiLCJzcGVlY2hTeW50aGVzaXMiLCJzcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UiLCJsYW5nIiwib25Cb3VuZGFyeSIsIm9uRW5kIiwib25FcnJvciIsIm9uU3RhcnQiLCJwaXRjaCIsInJhdGUiLCJzcGVhayIsInZvaWNlIiwidm9sdW1lIiwiY2hpbGRyZW4iLCJkZWZhdWx0UHJvcHMiLCJ3aW5kb3ciLCJ3ZWJraXRTcGVlY2hTeW50aGVzaXMiLCJTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UiLCJ3ZWJraXRTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJmdW5jIiwibnVtYmVyIiwiYW55Iiwib25lT2ZUeXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBTUEsTUFBTSxTQUFOQSxHQUFNO0FBQUEsU0FDVjtBQUFDLHNCQUFEO0FBQUE7QUFDRSx1QkFBa0JDLE1BQU1DLGVBRDFCO0FBRUUsZ0NBQTJCRCxNQUFNRTtBQUZuQztBQUlFO0FBQUMsNEJBQUQ7QUFBQTtBQUNFLGNBQU9GLE1BQU1HLElBRGY7QUFFRSxvQkFBYUgsTUFBTUksVUFGckI7QUFHRSxlQUFRSixNQUFNSyxLQUhoQjtBQUlFLGlCQUFVTCxNQUFNTSxPQUpsQjtBQUtFLGlCQUFVTixNQUFNTyxPQUxsQjtBQU1FLGVBQVFQLE1BQU1RLEtBTmhCO0FBT0UsY0FBT1IsTUFBTVMsSUFQZjtBQVFFLGVBQVFULE1BQU1VLEtBUmhCO0FBU0UsZUFBUVYsTUFBTVcsS0FUaEI7QUFVRSxnQkFBU1gsTUFBTVk7QUFWakI7QUFZSVosWUFBTWE7QUFaVjtBQUpGLEdBRFU7QUFBQSxDQUFaOztBQXFCQWQsSUFBSWUsWUFBSixHQUFtQjtBQUNqQmIsbUJBQWlCYyxPQUFPZCxlQUFQLElBQTBCYyxPQUFPQyxxQkFEakM7QUFFakJkLDRCQUEwQmEsT0FBT0Usd0JBQVAsSUFBbUNGLE9BQU9HO0FBRm5ELENBQW5COztBQUtBbkIsSUFBSW9CLFNBQUosR0FBZ0I7QUFDZGhCLFFBQU1pQixvQkFBVUMsTUFERjtBQUVkakIsY0FBWWdCLG9CQUFVRSxJQUZSO0FBR2RqQixTQUFPZSxvQkFBVUUsSUFISDtBQUlkaEIsV0FBU2Msb0JBQVVFLElBSkw7QUFLZGYsV0FBU2Esb0JBQVVFLElBTEw7QUFNZGQsU0FBT1ksb0JBQVVHLE1BTkg7QUFPZGQsUUFBTVcsb0JBQVVHLE1BUEY7QUFRZHRCLG1CQUFpQm1CLG9CQUFVSSxHQVJiO0FBU2R0Qiw0QkFBMEJrQixvQkFBVUksR0FUdEI7QUFVZGQsU0FBT1Usb0JBQVVDLE1BVkg7QUFXZFYsU0FBT1Msb0JBQVVLLFNBQVYsQ0FBb0IsQ0FBQ0wsb0JBQVVJLEdBQVgsRUFBZ0JKLG9CQUFVRSxJQUExQixDQUFwQixDQVhPO0FBWWRWLFVBQVFRLG9CQUFVRztBQVpKLENBQWhCOztrQkFlZXhCLEciLCJmaWxlIjoiU2F5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBDb21wb3NlciBmcm9tICcuL0NvbXBvc2VyJztcbmltcG9ydCBTYXlQcmltaXRpdmUgZnJvbSAnLi9TYXlQcmltaXRpdmUnO1xuXG5jb25zdCBTYXkgPSBwcm9wcyA9PlxuICA8Q29tcG9zZXJcbiAgICBzcGVlY2hTeW50aGVzaXM9eyBwcm9wcy5zcGVlY2hTeW50aGVzaXMgfVxuICAgIHNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZT17IHByb3BzLnNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSB9XG4gID5cbiAgICA8U2F5UHJpbWl0aXZlXG4gICAgICBsYW5nPXsgcHJvcHMubGFuZyB9XG4gICAgICBvbkJvdW5kYXJ5PXsgcHJvcHMub25Cb3VuZGFyeSB9XG4gICAgICBvbkVuZD17IHByb3BzLm9uRW5kIH1cbiAgICAgIG9uRXJyb3I9eyBwcm9wcy5vbkVycm9yIH1cbiAgICAgIG9uU3RhcnQ9eyBwcm9wcy5vblN0YXJ0IH1cbiAgICAgIHBpdGNoPXsgcHJvcHMucGl0Y2ggfVxuICAgICAgcmF0ZT17IHByb3BzLnJhdGUgfVxuICAgICAgc3BlYWs9eyBwcm9wcy5zcGVhayB9XG4gICAgICB2b2ljZT17IHByb3BzLnZvaWNlIH1cbiAgICAgIHZvbHVtZT17IHByb3BzLnZvbHVtZSB9XG4gICAgPlxuICAgICAgeyBwcm9wcy5jaGlsZHJlbiB9XG4gICAgPC9TYXlQcmltaXRpdmU+XG4gIDwvQ29tcG9zZXI+XG5cblNheS5kZWZhdWx0UHJvcHMgPSB7XG4gIHNwZWVjaFN5bnRoZXNpczogd2luZG93LnNwZWVjaFN5bnRoZXNpcyB8fCB3aW5kb3cud2Via2l0U3BlZWNoU3ludGhlc2lzLFxuICBzcGVlY2hTeW50aGVzaXNVdHRlcmFuY2U6IHdpbmRvdy5TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UgfHwgd2luZG93LndlYmtpdFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZVxufTtcblxuU2F5LnByb3BUeXBlcyA9IHtcbiAgbGFuZzogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25Cb3VuZGFyeTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRW5kOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25FcnJvcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuICBwaXRjaDogUHJvcFR5cGVzLm51bWJlcixcbiAgcmF0ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgc3BlZWNoU3ludGhlc2lzOiBQcm9wVHlwZXMuYW55LFxuICBzcGVlY2hTeW50aGVzaXNVdHRlcmFuY2U6IFByb3BUeXBlcy5hbnksXG4gIHNwZWFrOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB2b2ljZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFueSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgdm9sdW1lOiBQcm9wVHlwZXMubnVtYmVyXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTYXlcbiJdfQ==